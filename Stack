#include <stdio.h>
#include <stdlib.h>

#define MAX 5 // Define the maximum size of the stack

typedef struct {
    int items[MAX];
    int top;
} Stack;

// Initialize the stack
void initStack(Stack *s) {
    s->top = -1;
}

// Check if the stack is full
int isFull(Stack *s) {
    return s->top == MAX - 1;
}

// Check if the stack is empty
int isEmpty(Stack *s) {
    return s->top == -1;
}

// Push an element onto the stack
void push(Stack *s, int item) {
    if (isFull(s)) {
        printf("Stack Overflow! Cannot push %d\n", item);
        return;
    }
    s->items[++(s->top)] = item;
    printf("Pushed %d\n", item);
}

// Pop an element from the stack
int pop(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack Underflow! Cannot pop\n");
        return -1; // Return a sentinel value to indicate underflow
    }
    return s->items[(s->top)--];
}

// Display the stack elements
void display(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty\n");
        return;
    }
    printf("Stack elements: ");
    for (int i = 0; i <= s->top; i++) {
        printf("%d ", s->items[i]);
    }
    printf("\n");
}

int main() {
    Stack s;
    initStack(&s);

    // Push elements to the stack
    push(&s, 10);
    push(&s, 20);
    push(&s, 30);
    push(&s, 40);
    push(&s, 50);

    // Attempt to push beyond the capacity to show overflow
    push(&s, 60);

    // Display the stack
    display(&s);

    // Pop elements from the stack
    printf("Popped %d\n", pop(&s));
    printf("Popped %d\n", pop(&s));
    printf("Popped %d\n", pop(&s));
    printf("Popped %d\n", pop(&s));
    printf("Popped %d\n", pop(&s));

    // Attempt to pop from an empty stack to show underflow
    printf("Popped %d\n", pop(&s));

    return 0;
}w
