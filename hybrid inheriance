#include <iostream>
using namespace std;

// Virtual base class
class A {
public:
    A() {
        cout << "Constructor of A" << endl;
    }

    void showA() {
        cout << "Class A" << endl;
    }
};

// Class B inherits virtually from A
class B : virtual public A {
public:
    B() {
        cout << "Constructor of B" << endl;
    }

    void showB() {
        cout << "Class B" << endl;
    }
};

// Class C inherits virtually from A
class C : virtual public A {
public:
    C() {
        cout << "Constructor of C" << endl;
    }

    void showC() {
        cout << "Class C" << endl;
    }
};

// Class D inherits from both B and C
class D : public B, public C {
public:
    D() {
        cout << "Constructor of D" << endl;
    }

    void showD() {
        cout << "Class D" << endl;
    }
};

int main() {
    D obj;
    obj.showA(); // Function from virtual base class A
    obj.showB(); // Function from B
    obj.showC(); // Function from C
    obj.showD(); // Function from D

    return 0;
}
